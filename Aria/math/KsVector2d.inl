/*************************************************************************************************/
/*                                                                                               */
/*                           << KsVector2d ÉNÉâÉXÇÃÉCÉìÉâÉCÉìä÷êî >>                                */
/*                                                                                               */
/*************************************************************************************************/

//===============================================================================================//
// îzóÒì‡ÇÃílÇï‘Ç∑
//===============================================================================================//
ksINLINE KsReal& KsVector2d::operator [] ( KsInt32 index )
{
	return( ( (KsReal*)&x )[ index ] );
}

//===============================================================================================//
// îzóÒì‡ÇÃílÇï‘Ç∑
//===============================================================================================//
ksINLINE const KsReal& KsVector2d::operator [] ( KsInt32 index ) const
{
	return( ( (KsReal*)&x )[ index ] );
}

//===============================================================================================//
// = ââéZéq (ë„ì¸)
//===============================================================================================//
ksINLINE const KsVector2d& KsVector2d::operator = ( const KsVector2d &refVector )
{
	x = refVector.x;
	y = refVector.y;

	return( *this );
}

//===============================================================================================//
// += ââéZéq
//===============================================================================================//
ksINLINE KsVector2d& KsVector2d::operator += ( const KsVector2d& refVector )
{
	x += refVector.x;
	y += refVector.y;

	return	(*this);
}

//===============================================================================================//
// -= ââéZéq
//===============================================================================================//
ksINLINE KsVector2d& KsVector2d::operator -= ( const KsVector2d& refVector )
{
	x -= refVector.x;
	y -= refVector.y;

	return	(*this);
}

//===============================================================================================//
//  *= ââéZéq
//===============================================================================================//
ksINLINE KsVector2d& KsVector2d::operator *= ( KsReal s )
{
	x *= s;
	y *= s;

	return	(*this);
}

//===============================================================================================//
//  /= ââéZéq
//===============================================================================================//
ksINLINE KsVector2d& KsVector2d::operator /= ( KsReal s )
{
	if( s < ksTOLERANCE ){
		return (*this);
	}

	x /= s;
	y /= s;

	return	(*this);
}

//===============================================================================================//
// + ââéZéq(â¡éZ)
//===============================================================================================//
ksINLINE KsVector2d KsVector2d::operator + () const 
{
	return ( *this );
}

//===============================================================================================//
// - ââéZéq(å∏éZ)
//===============================================================================================//
ksINLINE KsVector2d KsVector2d::operator - () const 
{
	return KsVector2d( -x, -y );
}

//===============================================================================================//
// + ââéZéq(â¡éZ)
//===============================================================================================//
ksINLINE KsVector2d KsVector2d::operator + ( const KsVector2d& refVector ) const 
{
	return KsVector2d( x + refVector.x, y + refVector.y );
}

//===============================================================================================//
// - ââéZéq(å∏éZ)
//===============================================================================================//
ksINLINE KsVector2d KsVector2d::operator - ( const KsVector2d& refVector ) const 
{
	return KsVector2d( x - refVector.x, y - refVector.y );
}

//===============================================================================================//
// * ââéZéq(ä|éZ) 
//===============================================================================================//
ksINLINE KsVector2d KsVector2d::operator * ( KsReal s ) const 
{
	return KsVector2d( s*x, s*y );
}

//===============================================================================================//
// / ââéZéq(äÑéZ)
//===============================================================================================//
ksINLINE KsVector2d KsVector2d::operator / ( KsReal s ) const 
{
	if( KsFabs( s ) < ksTOLERANCE ){
		KsVector2d( x, y );
	}

	return KsVector2d( x/s, y/s );
}

//===============================================================================================//
// == ââéZéq(î‰är)
//===============================================================================================//
ksINLINE KsBool KsVector2d::operator == ( const KsVector2d& refVector ) const 
{
	return ( ( KsFabs( x - refVector.x ) < ksTOLERANCE ) && ( KsFabs( y - refVector.y ) < ksTOLERANCE ) );
}

//===============================================================================================//
// != ââéZéq(î‰är)
//===============================================================================================//
ksINLINE KsBool KsVector2d::operator != ( const KsVector2d& refVector ) const 
{
	return ( ( KsFabs( x - refVector.x ) > ksTOLERANCE ) || ( KsFabs( y - refVector.y ) > ksTOLERANCE ) );
}

//===============================================================================================//
// ílÇÉZÉbÉgÇ∑ÇÈ
//===============================================================================================//
ksINLINE void KsVector2d::set( KsReal xf, KsReal yf )
{
	x = xf;
	y = yf;
}

//===============================================================================================//
// ílÇÉZÉbÉgÇ∑ÇÈ
//===============================================================================================//
ksINLINE void KsVector2d::set( const KsReal* fArray )
{
	x = fArray[ 0 ];
	y = fArray[ 1 ];
}

//===============================================================================================//
//Å@éwíËÇ≥ÇÍÇΩí∑Ç≥ÇÃÉxÉNÉgÉãÇ…ïœçXÇ∑ÇÈ
//===============================================================================================//
ksINLINE void KsVector2d::scaleTo( KsReal len )
{
	const KsReal	len2 = length2();

	if( (len2 > ksTOLERANCE) && (KsFabs( len2 - (len*len) ) > ksTOLERANCE) )
	{
		const KsReal	factor = ( len / KsSqrt( len2 ) );

		x *= factor;
		y *= factor;
	}
}

//===============================================================================================//
// 0.0fÇ≈ÉäÉZÉbÉgÇ∑ÇÈ
//===============================================================================================//
ksINLINE void KsVector2d::reset()
{
	x = y = 0.0f;
}

//===============================================================================================//
// í∑Ç≥ÇãÅÇﬂÇÈ
//===============================================================================================//
ksINLINE KsReal KsVector2d::length()
{
	return KsSqrt( x*x + y*y );
}

//===============================================================================================//
// í∑Ç≥ÇÃ2èÊÇãÅÇﬂÇÈ
//===============================================================================================//
ksINLINE KsReal KsVector2d::length2()
{
	return ( x*x + y*y );
}

//===============================================================================================//
// ê≥ãKâª
//===============================================================================================//
ksINLINE void KsVector2d::normalize()
{
	const KsReal	norm = x*x + y*y;

	if( ( KsFabs( norm - 1.0f ) < ksTOLERANCE ) || ( norm < ksTOLERANCE2 ) )
	{
		return;
	}

	const KsReal invNorm = 1.0f / KsSqrt( norm );

	x *= invNorm;
	y *= invNorm;
}

//===============================================================================================//
// ì‡êœ
//===============================================================================================//
ksINLINE KsReal KsVector2d::dotProduct( const KsVector2d& refVector ) const
{
	return ( x*refVector.x + y*refVector.y );
}











